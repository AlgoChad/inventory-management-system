generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model ConditionType {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    tools     Tool[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StatusType {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    tools     Tool[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tool {
    id          Int           @id @default(autoincrement())
    toolNumber  String        @unique
    toolName    String
    quantity    Int
    conditionId Int
    statusId    Int
    condition   ConditionType @relation(fields: [conditionId], references: [id])
    status      StatusType    @relation(fields: [statusId], references: [id])
    personnelId Int?
    personnel   Personnel?    @relation(fields: [personnelId], references: [id])
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    Checkin Checkin[]
    ToolRequest ToolRequest[]
    ToolRepairRequest ToolRepairRequest[]
}

model Project {
    id                 Int      @id @default(autoincrement())
    projectName        String   @unique
    projectDescription String
    color              String
    startDate          DateTime
    endDate            DateTime
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    Checkin Checkin[]
}

model Checkin {
    id              Int       @id @default(autoincrement())
    checkInColor    String
    checkInQuantity Int
    toolId          Int
    projectId       Int
    tool            Tool      @relation(fields: [toolId], references: [id])
    project         Project   @relation(fields: [projectId], references: [id])
    checkInDate     DateTime
    checkOutDate    DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model Personnel {
    id        Int      @id @default(autoincrement())
    name      String
    userId    Int?     @unique
    user      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Tool Tool[]

    ToolRequest ToolRequest[]

    ToolRepairRequest ToolRepairRequest[]
}

model User {
    id                Int        @id @default(autoincrement())
    username          String     @unique
    password          String
    isPasswordChanged Boolean    @default(false)
    accessToken       String?
    refreshToken      String?
    personnel         Personnel?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
}

model ToolRequest {
    id          Int      @id @default(autoincrement())
    toolId      Int
    personnelId Int
    quantity    Int
    status      String   @default("PENDING")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    tool        Tool     @relation(fields: [toolId], references: [id])
    personnel   Personnel @relation(fields: [personnelId], references: [id])
}

model ToolRepairRequest {
    id          Int      @id @default(autoincrement())
    toolId      Int
    personnelId Int
    description String
    quantity    Int
    status      String   @default("PENDING")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    tool        Tool     @relation(fields: [toolId], references: [id])
    personnel   Personnel @relation(fields: [personnelId], references: [id])
    images      Image[]
}

model Image {
    id                  Int                 @id @default(autoincrement())
    name                String
    base64              String
    toolRepairRequestId Int
    createdAt           DateTime            @default(now())
    updatedAt           DateTime            @updatedAt

    toolRepairRequest   ToolRepairRequest   @relation(fields: [toolRepairRequestId], references: [id])
}
